unit DScintilla;

{
  Delphi wrapper for Scintilla editor
  Auto-generated from Scintilla.iface
  Generation date: 04/06/2025 15:30:00
}

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls;

const
  /// <summary>
  /// Invalid position sentinel value
  /// </summary>
  INVALID_POSITION = -1;
  
  /// <summary>
  /// Start of Scintilla messages (greater than Windows edit messages)
  /// </summary>
  SCI_START = 2000;

  // Scintilla messages
  SCI_ADDTEXT = 2001;
  SCI_INSERTTEXT = 2003;
  SCI_CLEARALL = 2004;
  SCI_GETLENGTH = 2006;
  SCI_GETCHARAT = 2007;
  
  // SC_MARK_ enumeration
  /// <summary>
  /// Marker symbol: circle
  /// </summary>
  SC_MARK_CIRCLE = 0;
  
  /// <summary>
  /// Marker symbol: rounded rectangle
  /// </summary>
  SC_MARK_ROUNDRECT = 1;

type
  TScintilla = class(TWinControl)
  private
    FDirectPtr: Pointer;
    FDirectFunction: Pointer;
  protected
    procedure CreateWnd; override;
    procedure DestroyWnd; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;

    // Basics
    
    /// <summary>
    /// Add text to the document at current position.
    /// </summary>
    /// <param name="length">
    /// The length parameter
    /// </param>
    /// <param name="text">
    /// Text string
    /// </param>
    procedure AddText(length: Integer; text: PAnsiChar);
    
    /// <summary>
    /// Insert string at a position.
    /// </summary>
    /// <param name="pos">
    /// Position in the document
    /// </param>
    /// <param name="text">
    /// Text string
    /// </param>
    procedure InsertText(pos: Integer; text: PAnsiChar);
    
    /// <summary>
    /// Delete all text in the document.
    /// </summary>
    procedure ClearAll;
    
    /// <summary>
    /// Returns the number of bytes in the document.
    /// </summary>
    /// <returns>
    /// Returns the position in the document
    /// </returns>
    function GetLength: Integer;
    
    /// <summary>
    /// Returns the character byte at the position.
    /// </summary>
    /// <param name="pos">
    /// Position in the document
    /// </param>
    /// <returns>
    /// Returns the requested value
    /// </returns>
    function GetCharAt(pos: Integer): Integer;
    
    /// <summary>
    /// Returns the position of the caret.
    /// </summary>
    /// <returns>
    /// Returns the position in the document
    /// </returns>
    function GetCurrentPos: Integer;
    
    /// <summary>
    /// Sets the position of the caret.
    /// </summary>
    /// <param name="caret">
    /// Position in the document
    /// </param>
    procedure SetCurrentPos(caret: Integer);
    
    /// <summary>
    /// Set the symbol used for a particular marker number.
    /// </summary>
    /// <param name="markerNumber">
    /// Integer value
    /// </param>
    /// <param name="markerSymbol">
    /// Integer value
    /// </param>
    procedure MarkerDefine(markerNumber: Integer; markerSymbol: Integer);

  published
    // Auto-generated properties
    
    /// <summary>
    /// Returns the number of bytes in the document.
    /// </summary>
    property Length: Integer read GetLength;
    
    /// <summary>
    /// Returns the position of the caret.
    /// </summary>
    property CurrentPos: Integer read GetCurrentPos write SetCurrentPos;
  end;

procedure Register;

implementation

const
  ScintillaClassName = 'Scintilla';
  ScintillaDLL = 'SciLexer.dll';

procedure Register;
begin
  RegisterComponents('Scintilla', [TScintilla]);
end;

{ TScintilla }

constructor TScintilla.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  Width := 300;
  Height := 200;
  TabStop := True;
  ControlStyle := ControlStyle + [csCaptureMouse, csClickEvents, csDoubleClicks, csOpaque];
end;

destructor TScintilla.Destroy;
begin
  inherited Destroy;
end;

procedure TScintilla.CreateWnd;
var
  LoadResult: THandle;
begin
  LoadResult := LoadLibrary(ScintillaDLL);
  if LoadResult = 0 then
    raise Exception.Create('Failed to load ' + ScintillaDLL);

  CreateWindowEx(0, ScintillaClassName, nil,
    WS_CHILD or WS_VISIBLE or WS_TABSTOP or WS_CLIPCHILDREN,
    0, 0, Width, Height, Handle, 0, HInstance, nil);

  // Get direct access for better performance
  FDirectPtr := Pointer(SendMessage(Handle, SCI_GETDIRECTPOINTER, 0, 0));
  FDirectFunction := Pointer(SendMessage(Handle, SCI_GETDIRECTFUNCTION, 0, 0));
end;

procedure TScintilla.DestroyWnd;
begin
  FDirectPtr := nil;
  FDirectFunction := nil;
  inherited DestroyWnd;
end;

procedure TScintilla.AddText(length: Integer; text: PAnsiChar);
begin
  SendMessage(Handle, SCI_ADDTEXT, length, LPARAM(text));
end;

procedure TScintilla.InsertText(pos: Integer; text: PAnsiChar);
begin
  SendMessage(Handle, SCI_INSERTTEXT, pos, LPARAM(text));
end;

procedure TScintilla.ClearAll;
begin
  SendMessage(Handle, SCI_CLEARALL, 0, 0);
end;

function TScintilla.GetLength: Integer;
begin
  Result := SendMessage(Handle, SCI_GETLENGTH, 0, 0);
end;

function TScintilla.GetCharAt(pos: Integer): Integer;
begin
  Result := SendMessage(Handle, SCI_GETCHARAT, pos, 0);
end;

function TScintilla.GetCurrentPos: Integer;
begin
  Result := SendMessage(Handle, SCI_GETCURRENTPOS, 0, 0);
end;

procedure TScintilla.SetCurrentPos(caret: Integer);
begin
  SendMessage(Handle, SCI_SETCURRENTPOS, caret, 0);
end;

procedure TScintilla.MarkerDefine(markerNumber: Integer; markerSymbol: Integer);
begin
  SendMessage(Handle, SCI_MARKERDEFINE, markerNumber, markerSymbol);
end;

end.