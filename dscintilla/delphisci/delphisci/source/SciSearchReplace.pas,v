head	1.4;
access;
symbols
	test:1.1.1.1 hdalis:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2004.12.03.17.18.59;	author hdalis;	state Exp;
branches;
next	1.3;

1.3
date	2004.11.08.00.00.42;	author hdalis;	state Exp;
branches;
next	1.2;

1.2
date	2004.10.16.10.17.25;	author hdalis;	state Exp;
branches;
next	1.1;

1.1
date	2004.10.01.21.05.22;	author hdalis;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.10.01.21.05.22;	author hdalis;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Delphi Scintilla Interface Components 0.15
@
text
@//CE_Desc_Include(helpdescriptions.txt)
unit SciSearchReplace;
{
 Unit    : SciSearchReplace
 Purpose : Search and Replace for TScintilla based on Synedit Dialogs
 Created : 20/03/2003
 Author  : Kiriakos Vlahos (kvlahos@@london.edu)
 History : 29/09/2004 Initial Release with Delphi Scintilla Interface Components
                      Changed Editor property from TScintilla to TScintillaBase class.
                      Wasn't any need for the extra properties to use this dialog.
                      hdalis (hdalis@@users.sourceforge.net)

}

interface
Uses
  Types, Classes, Controls, Forms, SciLexer;

Type

  TSciSearchReplace = class(TComponent)
  private
    FSearchForSelWord : boolean;
    FEditor : TScintillaBase;
    FSearchFromCaretInt: boolean;
    FFoundText : String;
    FOnTextFound : TNotifyEvent;
    FOnTextNotFound : TNotifyEvent;
    FOnTextReplaced : TNotifyEvent;
  protected
      procedure Notification(AComponent: TComponent;
                Operation: TOperation);  override;
  public
    // Search Options
    SearchBackwards: boolean;
    SearchCaseSensitive: boolean;
    SearchFromCaret: boolean;
    SearchSelectionOnly: boolean;
    SearchWholeWords: boolean;
    SearchRegex: boolean;
    SearchText: string;
    SearchTextHistory: string;
    ReplaceText: string;
    ReplaceTextHistory: string;
    property FoundText : string read fFoundText;
    procedure DoSearchReplaceText(AReplace, ABackwards: boolean);
    procedure ShowSearchReplaceDialog(AReplace: boolean);
  published
    property SearchForSelWord : boolean read FSearchForSelWord write FSearchForSelWord;
    property Editor : TScintillaBase read FEditor write FEditor;
    property OnTextFound : TNotifyEvent read FOnTextFound write FOnTextFound;
    property OnTextNotFound : TNotifyEvent read FOnTextNotFound write FOnTextNotFound;
    property OnTextReplaced : TNotifyEvent read FOnTextReplaced write FOnTextReplaced;
  end;

implementation

Uses
 SciSearchTextDlg, SciConfirmReplaceDlg, SciReplaceTextDlg, SciSupport;

{ TSciSearchReplace }

procedure TSciSearchReplace.DoSearchReplaceText(AReplace, ABackwards: boolean);
var
  Options: Integer;
  StartPosition, EndPosition : integer;
  TargetStart, TargetEnd, posFind : integer;
  APos: TPoint;
  EditRect: TRect;
  DlgRes : integer;
  LenFound, LenReplaced : integer;
begin
  if not Assigned(FEditor) then Exit;

  Options := 0;
  if SearchCaseSensitive then
    Options := Options or SCFIND_MATCHCASE;
  if SearchWholeWords then
    Options := Options or SCFIND_WHOLEWORD;
  if SearchRegex then
    Options := Options or SCFIND_REGEXP;

  if ABackwards then
  begin
    if fSearchFromCaretInt and not SearchSelectionOnly then
      StartPosition := FEditor.GetSelectionStart - 1
    else if SearchSelectionOnly then
      StartPosition := FEditor.GetSelectionEnd
    else
      StartPosition := FEditor.GetLength;
    if SearchSelectionOnly then
      EndPosition := FEditor.GetSelectionStart
    else
      EndPosition := 0;
  end else
  begin
    if fSearchFromCaretInt and not SearchSelectionOnly then
      StartPosition := FEditor.GetSelectionEnd + 1
    else if SearchSelectionOnly then
      StartPosition := FEditor.GetSelectionStart
    else
      StartPosition := 0;
    if SearchSelectionOnly then
      EndPosition := FEditor.GetSelectionEnd
    else
      EndPosition := FEditor.GetLength;
  end;

  with FEditor do begin
    SetTargetStart(StartPosition);
    SetTargetEnd(EndPosition);
    SetSearchFlags(Options);
    posFind := SearchInTarget(Length(SearchText), PChar(SearchText));
    if (posFind < 0) then begin
      if Assigned(FOnTextNotFound) then
        FOnTextNotFound(Self);
    end else
    begin
      TargetStart := GetTargetStart;
      TargetEnd := GetTargetEnd;
      LenFound := TargetEnd - TargetStart;
      LenReplaced := LenFound;
      EnsureRangeVisible(TargetStart, TargetEnd);
      SetSel(TargetStart, TargetEnd);
			FFoundText := FEditor.SelText;
      if Assigned(FOnTextFound) then
        FOnTextFound(Self);

      // Replace code
      if AReplace then
      begin
        DlgRes := mrYes;

        if ConfirmReplaceDialog = nil then
          ConfirmReplaceDialog := TConfirmReplaceDialog.Create(Application);

        while (posFind >= 0) and (DlgRes <> mrCancel) do
        begin
          if not (DlgRes = mrYesToAll) then
          begin
            APos := Point(PointXFromPosition(TargetStart), PointYFromPosition(TargetStart));
            APos := ClientToScreen(APos);
            EditRect := FEditor.ClientRect;
            EditRect.TopLeft := ClientToScreen(EditRect.TopLeft);
            EditRect.BottomRight := ClientToScreen(EditRect.BottomRight);

            ConfirmReplaceDialog.PrepareShow(EditRect, APos.X, APos.Y,
              APos.Y + 2 * FEditor.TextHeight(LineFromPosition(TargetStart)), SearchText);
            DlgRes :=ConfirmReplaceDialog.ShowModal;
          end;

          if DlgRes = mrYesToAll then FEditor.BeginUndoAction;

          if DlgRes in [mrYes, mrYesToAll] then
          begin
            // Replace
            if SearchRegex then
              LenReplaced := ReplaceTargetRE(Length(ReplaceText), PChar(ReplaceText))
            else
              LenReplaced := ReplaceTarget(Length(ReplaceText), PChar(ReplaceText));
            TargetEnd := TargetStart + LenReplaced -1;
            if Assigned(FOnTextReplaced) then FOnTextReplaced(Self);
          end;
          if DlgRes in [mrYes, mrNo, mrYesToAll] then
          begin
            // carry on
            if ABackwards then
            begin
              SetTargetStart(TargetStart - 1);
              SetTargetEnd(EndPosition);
            end else
            begin
              SetTargetStart(TargetEnd + 1);
              EndPosition := EndPosition + LenReplaced - LenFound;
              SetTargetEnd(EndPosition);
            end;
            SetTargetEnd(EndPosition);
            SetSearchFlags(Options);
            posFind := SearchInTarget(Length(SearchText), PChar(SearchText));
            if posFind >= 0 then
            begin
              TargetStart := GetTargetStart;
              TargetEnd := GetTargetEnd;
              LenFound := TargetEnd - TargetStart;
              LenReplaced := LenFound;
              EnsureRangeVisible(TargetStart, TargetEnd);
              SetSel(TargetStart, TargetEnd);
            end;
          end else
            break;
        end;   // While

        if DlgRes = mrYesToAll then FEditor.EndUndoAction;

        // Restore original selection if Searching in Selection
        if SearchSelectionOnly then
        begin
          if ABackwards then
            SetSel(EndPosition, StartPosition)
          else
            SetSel(StartPosition, EndPosition);
          EnsureRangeVisible(GetSelectionStart, GetSelectionEnd);
        end;
      end;  // if AReplace
    end;  //if (posFind < 0)
  end; // with FEditor

  if ConfirmReplaceDialog <> nil then begin
    ConfirmReplaceDialog.Free;
    ConfirmReplaceDialog := nil;
  end;
end;

procedure TSciSearchReplace.Notification(AComponent: TComponent;
  Operation: TOperation);
begin
  inherited;
  if (AComponent = FEditor) and (Operation = opRemove) then FEditor := nil;
end;

procedure TSciSearchReplace.ShowSearchReplaceDialog(AReplace: boolean);
var
  dlg: TTextSearchDialog;
  SelectedText : string;
begin
  if not Assigned(FEditor) then Exit;

  if AReplace then
    dlg := TTextReplaceDialog.Create(Self)
  else
    dlg := TTextSearchDialog.Create(Self);
  with dlg do try
    // assign search options
    SearchBackwards := Self.SearchBackwards;
    SearchCaseSensitive := Self.SearchCaseSensitive;
    SearchFromCursor := Self.SearchFromCaret;
    SearchInSelectionOnly := Self.SearchSelectionOnly;
		SelectedText := FEditor.SelText;

    if (SelectedText <> '') and
       (Pos(#10, SelectedText) > 0) or (Pos(#13, SelectedText) > 0) then
      SearchInSelectionOnly := True
    else
      SearchInSelectionOnly := False;

    // start with last search text
    SearchText := Self.SearchText;
    if FSearchForSelWord and not SearchInSelectionOnly and
       (SelectedText <> '') and (Pos(' ', SelectedText) <= 0) then
      SearchText := SelectedText;

    SearchTextHistory := Self.SearchTextHistory;
    if AReplace then with dlg as TTextReplaceDialog do begin
      ReplaceText := Self.ReplaceText;
      ReplaceTextHistory := Self.ReplaceTextHistory;
    end;
    SearchWholeWords := Self.SearchWholeWords;
    if ShowModal = mrOK then begin
      Self.SearchBackwards := SearchBackwards;
      Self.SearchCaseSensitive := SearchCaseSensitive;
      Self.SearchFromCaret := SearchFromCursor;
      Self.SearchSelectionOnly := SearchInSelectionOnly;
      Self.SearchWholeWords := SearchWholeWords;
      Self.SearchRegex := SearchRegularExpression;
      Self.SearchText := SearchText;
      Self.SearchTextHistory := SearchTextHistory;
      if AReplace then with dlg as TTextReplaceDialog do begin
        Self.ReplaceText := ReplaceText;
        Self.ReplaceTextHistory := ReplaceTextHistory;
      end;
      fSearchFromCaretInt := Self.SearchFromCaret;
      if SearchText <> '' then begin
        DoSearchReplaceText(AReplace, Self.SearchBackwards);
        fSearchFromCaretInt := True;
      end;
      Self.SearchSelectionOnly := False;
    end;
  finally
    dlg.Free;
  end;
end;

initialization
  ConfirmReplaceDialog := nil;
end.
@


1.3
log
@Delphi Scintilla Interface Components v0.,12
@
text
@d83 2
a84 1
  if ABackwards then begin
d95 2
a96 1
  end else begin
d115 4
a118 2
      if Assigned(FOnTextNotFound) then FOnTextNotFound(Self);
    end else begin
d126 2
a127 1
      if Assigned(FOnTextFound) then FOnTextFound(Self);
d130 2
a131 1
      if AReplace then begin
d137 4
a140 2
        while (posFind >= 0) and (DlgRes <> mrCancel) do begin
          if not (DlgRes = mrYesToAll) then begin
d149 1
a149 1
            DlgRes := ConfirmReplaceDialog.ShowModal;
d154 2
a155 1
          if DlgRes in [mrYes, mrYesToAll] then begin
d164 2
a165 1
          if DlgRes in [mrYes, mrNo, mrYesToAll] then begin
d167 2
a168 1
            if ABackwards then begin
d171 2
a172 1
            end else begin
d180 2
a181 1
            if posFind >= 0 then begin
d196 2
a197 1
        if SearchSelectionOnly then begin
a203 1

@


1.2
log
@Some bugfixes, and other changes
@
text
@d3 11
a13 6
////////////////////////////////////////////////////////////////////////////////
// Unit    : SciSearchReplace
// Purpose : Search and Replace for TScintilla based on Synedit Dialogs
// Created : 20/03/2003
// Author  : Kiriakos Vlahos (kvlahos@@london.edu)
////////////////////////////////////////////////////////////////////////////////
d17 1
a17 1
  Types, Classes, Controls, Forms, SciLexerMod;
d24 1
a24 1
    FEditor : TScintilla;
a45 1

a46 1

a48 1

d50 1
a50 3

    property Editor : TScintilla read FEditor write FEditor;

a51 1

a52 1

@


1.1
log
@Initial revision
@
text
@d1 1
d19 1
a19 1
    FScintilla : TScintilla;
d41 1
d43 1
d46 1
d48 3
a50 1
    property Scintilla : TScintilla read FScintilla write FScintilla;
d52 1
d54 1
d75 1
a75 1
  if not Assigned(FScintilla) then Exit;
d87 1
a87 1
      StartPosition := FScintilla.GetSelectionStart - 1
d89 1
a89 1
      StartPosition := FScintilla.GetSelectionEnd
d91 1
a91 1
      StartPosition := FScintilla.GetLength;
d93 1
a93 1
      EndPosition := FScintilla.GetSelectionStart
d98 1
a98 1
      StartPosition := FScintilla.GetSelectionEnd + 1
d100 1
a100 1
      StartPosition := FScintilla.GetSelectionStart
d104 1
a104 1
      EndPosition := FScintilla.GetSelectionEnd
d106 1
a106 1
      EndPosition := FScintilla.GetLength;
d109 1
a109 1
  with FScintilla do begin
d123 1
a123 1
			FFoundText := FScintilla.SelText;
d137 1
a137 1
            EditRect := FScintilla.ClientRect;
d142 1
a142 1
              APos.Y + 2 * FScintilla.TextHeight(LineFromPosition(TargetStart)), SearchText);
d146 1
a146 1
          if DlgRes = mrYesToAll then FScintilla.BeginUndoAction;
d182 1
a182 1
        if DlgRes = mrYesToAll then FScintilla.EndUndoAction;
d195 1
a195 1
  end; // with FScintilla
d207 1
a207 1
  if (AComponent = FScintilla) and (Operation = opRemove) then FScintilla := nil;
d215 1
a215 1
  if not Assigned(FScintilla) then Exit;
d227 1
a227 1
		SelectedText := FScintilla.SelText;
@


1.1.1.1
log
@no message
@
text
@@
