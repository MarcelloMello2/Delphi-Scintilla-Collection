head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	2004.12.03.17.18.58;	author hdalis;	state Exp;
branches;
next	1.1;

1.1
date	2004.11.21.04.20.21;	author hdalis;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Delphi Scintilla Interface Components 0.15
@
text
@//CE_Desc_Include(helpdescriptions.txt)
{
	Delphi Scintilla Interface Components
	Copyright (C) 2004, Jan Martin Pettersen (hdalis)

	This library is free software; you can redistribute it and/or
	modify it under the terms of the GNU Lesser General Public
	License as published by the Free Software Foundation; either
	version 2.1 of the License, or (at your option) any later
	version.

	This library is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
	Lesser General Public License for more details.

	You should have received a copy of the GNU Lesser General Public
	License along with this library; if not, write to the Free
	Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
	02111-1307 USA
}
{
  Author : hdalis
      $Id: SciControllerHandler.pas,v 1.5 2004/11/18 04:29:51 hdalis Exp $
  Purpose: This manages, and forwards OnCharAdded, OnMacroRecord, OnCallTipClick
           to the registered components..
           Internally used.
           
  History: 18/11/2004 Initial Release
}
unit SciControllerHandler;
interface
uses Classes,SciLexer;

type
TControllerControl = class (TScintillaBase)
  public
    property OnCharAdded;
    property OnCallTipClick;
  end;

TCharAddedProc = class (TObject)
  private
    fCharAddedProc : TSCEvent_charadded;
  public
    constructor Create (aCharAddedProc : TSCEvent_charadded);
    property OnCharAdded : TSCEvent_charadded read fCharAddedProc write fCharAddedProc;
    end;

TMacroRecordProc = class (TObject)
  private
    fMacroRecordProc : TSCEvent_macrorecord;
  public
    constructor Create (aMacroRecordProc : TSCEvent_macrorecord);
    property OnMacroRecord : TSCEvent_macrorecord read fMacroRecordProc write fMacroRecordProc;
    end;

TCallTipClickProc = class (TObject)
  private
    fCallTipClickProc : TSCEvent_calltipclick;
  public
    constructor Create (aCallTipClickProc : TSCEvent_calltipclick);
    property OnCallTipClick : TSCEvent_calltipclick read fCallTipClickProc write fCallTipClickProc;
    end;

TSciController = class (TObject)
  private
    fControl : TControllerControl;
    fCharAddedChain : TList;
    fInCharAdded : Boolean;
    fOldCharAdded : TSCEvent_charadded;
    fCallTipClickChain : TList;
    fOldCallTipClick : TSCEvent_calltipclick;
{$Ifndef NOMACRORECORD}
    fMacroRecordChain : TList;
    fOldMacroRecord : TSCEvent_macrorecord;
{$Endif}
    procedure SetOnCharAdded (const Value: TSCEvent_charadded);
    procedure SetOnCallTipClick (const Value: TSCEvent_calltipclick);
{$Ifndef NOMACRORECORD}
    procedure SetOnMacroRecord (const Value: TSCEvent_macrorecord);
{$Endif}
  protected
    procedure EditorCharAdded (Sender : TObject; const ch : LongInt);
    procedure EditorCallTipClick (Sender : TObject; const position : LongInt);
{$Ifndef NOMACRORECORD}
    procedure EditorMacroRecord (Sender : TObject; const message : LongInt; const wParam : LongInt; const lParam : LongInt);
{$Endif}
  public
    constructor Create (aControl : TScintillaBase);
    destructor Destroy; override;
    procedure ExecuteCharAdded (Sender: TObject; const ch : LongInt);
    procedure AddCharAddedHandler (aHandler : TCharAddedProc);
    procedure RemoveCharAddedHandler (aHandler : TCharAddedProc);

{$Ifndef NOMACRORECORD}
    procedure ExecuteMacroRecord (Sender: TObject;const message : LongInt; const wParam : LongInt; const lParam : LongInt);
    procedure AddMacroRecordHandler (aHandler : TMacroRecordProc);
    procedure RemoveMacroRecordHandler (aHandler : TMacroRecordProc);
{$Endif}
    procedure ExecuteCallTipClick (Sender: TObject; const position : LongInt);
    procedure AddCallTipClickHandler (aHandler : TCallTipClickProc);
    procedure RemoveCallTipClickHandler (aHandler : TCallTipClickProc);

    property  OnCharAdded : TSCEvent_charadded read fOldCharAdded write SetOnCharAdded;
    property  OnCallTipClick : TSCEvent_calltipclick read fOldCallTipClick write SetOnCallTipClick;
{$Ifndef NOMACRORECORD}
    property  OnMacroRecord : TSCEvent_macrorecord read fOldMacroRecord write SetOnMacroRecord;
{$Endif}
end;


implementation
{ TSciController }

constructor TSciController.Create (aControl : TScintillaBase);
begin
  fControl := TControllerControl (aControl);
  fInCharAdded := false;
  fCharAddedChain := TList.Create;
  fOldCharAdded := fControl.OnCharAdded;
  fControl.OnCharAdded := EditorCharAdded;
  fCallTipClickChain := TList.Create;
  fOldCallTipClick := fControl.OnCallTipClick;
  fControl.OnCallTipClick := EditorCallTipClick;
{$Ifndef NOMACRORECORD}
  fMacroRecordChain := TList.Create;
  fOldMacroRecord := fControl.OnMacroRecord;
  fControl.OnMacroRecord := EditorMacroRecord;
{$Endif}
end;

destructor TSciController.Destroy;
begin
  fControl.OnCharAdded  := fOldCharAdded;
  fCharAddedChain.Free;
  fControl.OnCallTipClick  := fOldCallTipClick;
  fCallTipClickChain.Free;
{$Ifndef NOMACRORECORD}
  fControl.OnMacroRecord  := fOldMacroRecord;
  fMacroRecordChain.Free;
{$Endif}
  inherited Destroy;
end;

{$Ifndef NOMACRORECORD}
procedure TSciController.SetOnMacroRecord (const Value: TSCEvent_macrorecord);
begin
  fOldMacroRecord := Value;
  fControl.OnMacroRecord := EditorMacroRecord;
end;

procedure TSciController.EditorMacroRecord (Sender : TObject; const message : LongInt; const wParam : LongInt; const lParam : LongInt);
var
  idx : Integer;
begin
  with fMacroRecordChain do
  begin
    for idx := Count - 1 downto 0 do
    begin
      with TMacroRecordProc (Items[idx]) do
        if Assigned (OnMacroRecord) then begin
          OnMacroRecord (Sender,message,wParam,lParam);
       end;
    end;
  end;
  if Assigned (fOldMacroRecord) then
    fOldMacroRecord (Sender,message,wParam,lParam);
end;

procedure TSciController.ExecuteMacroRecord (Sender: TObject;const message : LongInt; const wParam : LongInt; const lParam : LongInt);
begin
  EditorMacroRecord (Sender,message,wParam,lParam);
end;

procedure TSciController.AddMacroRecordHandler(aHandler: TMacroRecordProc);
begin
  fMacroRecordChain.Add(aHandler);
end;

procedure TSciController.RemoveMacroRecordHandler(aHandler: TMacroRecordProc);
begin
  fMacroRecordChain.Remove(aHandler);
end;

{$Endif}

procedure TSciController.SetOnCharAdded (const Value: TSCEvent_charadded);
begin
  fOldCharAdded := Value;
  fControl.OnCharAdded := EditorCharAdded;
end;
procedure TSciController.SetOnCallTipClick(const Value: TSCEvent_calltipclick);
begin
  fOldCallTipClick := Value;
  fControl.OnCallTipClick := EditorCallTipClick;
end;


procedure TSciController.EditorCharAdded (Sender: TObject; const ch : LongInt);
var
  idx : Integer;
begin
  if fInCharAdded then
    exit;
  fInCharAdded := true;
  try
    with fCharAddedChain do begin
      for idx := Count - 1 downto 0 do begin
        with TCharAddedProc (Items[idx]) do
          if Assigned (OnCharAdded) then begin
            OnCharAdded (Sender,ch);
            if (ch = 0) then begin
              fInCharAdded := false;
              exit;
            end;
         end;
      end;
    end;
    if Assigned (fOldCharAdded) then
      fOldCharAdded (Sender,ch);
  finally
    fInCharAdded := false;
  end;
end;

procedure TSciController.EditorCallTipClick (Sender: TObject; const position : LongInt);
var
  idx : Integer;
begin
  with fCallTipClickChain do
  begin
    for idx := Count - 1 downto 0 do begin
      with TCallTipClickProc (Items[idx]) do
        if Assigned (OnCallTipClick) then
        begin
          OnCallTipClick(Sender,position);
        end;
    end;
  end;
  if Assigned (fOldCallTipClick) then
    fOldCallTipClick(Sender,position);
end;


procedure TSciController.ExecuteCharAdded (Sender: TObject; const ch: Integer);
begin
  EditorCharAdded (Sender,ch);
end;

procedure TSciController.ExecuteCallTipClick (Sender: TObject; const position: Integer);
begin
  EditorCallTipClick (Sender,position);
end;

procedure TSciController.AddCharAddedHandler(aHandler: TCharAddedProc);
begin
  fCharAddedChain.Add(aHandler);
end;

procedure TSciController.RemoveCharAddedHandler(aHandler: TCharAddedProc);
begin
  fCharAddedChain.Remove(aHandler);
end;

procedure TSciController.AddCallTipClickHandler(aHandler: TCallTipClickProc);
begin
  fCallTipClickChain.Add(aHandler);
end;

procedure TSciController.RemoveCallTipClickHandler(aHandler: TCallTipClickProc);
begin
  fCallTipClickChain.Remove(aHandler);
end;

constructor TCharAddedProc.Create (aCharAddedProc : TSCEvent_charadded);
begin
  inherited Create;
  fCharAddedProc := aCharAddedProc;
end;

constructor TCallTipClickProc.Create (aCallTipClickProc : TSCEvent_calltipclick);
begin
  inherited Create;
  fCallTipClickProc := aCallTipClickProc;
end;

constructor TMacroRecordProc.Create (aMacroRecordProc : TSCEvent_macrorecord);
begin
  inherited Create;
  fMacroRecordProc := aMacroRecordProc;
end;

end.
@


1.1
log
@Delphi Scintilla Interface Components 0.14
@
text
@d25 4
@

