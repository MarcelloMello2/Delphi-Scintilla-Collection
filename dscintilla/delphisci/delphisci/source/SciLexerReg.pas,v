head	1.7;
access;
symbols
	test:1.1.1.1 hdalis:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2004.12.03.17.18.59;	author hdalis;	state Exp;
branches;
next	1.6;

1.6
date	2004.11.21.04.20.21;	author hdalis;	state Exp;
branches;
next	1.5;

1.5
date	2004.11.13.04.29.50;	author hdalis;	state Exp;
branches;
next	1.4;

1.4
date	2004.11.08.00.00.41;	author hdalis;	state Exp;
branches;
next	1.3;

1.3
date	2004.10.18.10.24.50;	author hdalis;	state Exp;
branches;
next	1.2;

1.2
date	2004.10.16.10.17.25;	author hdalis;	state Exp;
branches;
next	1.1;

1.1
date	2004.10.01.21.02.17;	author hdalis;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.10.01.21.02.17;	author hdalis;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Delphi Scintilla Interface Components 0.15
@
text
@{
	Delphi Scintilla Interface Components
	Copyright (C) 2004, Jan Martin Pettersen (hdalis)

	This library is free software; you can redistribute it and/or
	modify it under the terms of the GNU Lesser General Public
	License as published by the Free Software Foundation; either
	version 2.1 of the License, or (at your option) any later
	version.

	This library is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
	Lesser General Public License for more details.

	You should have received a copy of the GNU Lesser General Public
	License along with this library; if not, write to the Free
	Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
	02111-1307 USA
}
{
  Author: hdalis (hdalis@@users.sourceforge.net)
     $Id: SciLexerReg.pas,v 1.5 2004/11/13 04:29:50 hdalis Exp $
  Purpose: Register components and component editors.
  History: 29/09/2004 Initial Release
           17/10/2004 Added property editor for the Lexer property of
                      TSciLangItem
}

{$Include commondefs.inc}
unit SciLexerReg;
interface
uses
	Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs;

procedure Register;
implementation
Uses
{$Ifdef COMPILER5}DsgnIntf,{$Else}DesignIntf, DesignEditors, {$Endif}
  SciSupport,SciLexerMemo,SciAutoComplete,SciCallTips,EdOptionsWin, SciLexerOptionsDlg, SciSearchReplace,
	SciKeyBindings,SciLexerMod,ScintillaLanguageManager,scilangfiller,SciPropertyMgr,SciDetectUtils
  ,SciDocuments,SciMacroRecording,SciResLangDcl,SciAbbrevationManager,tcFontComboBox,SciLexer;

{$R scipropmgr.dcr}
{$R tcFontCombobox.dcr}
{$R scidocuments.dcr}
{$R scilexer.dcr}
Type
	TScintillaComponentEditor = class(TDefaultEditor)
	public
		procedure ExecuteVerb(Index: Integer); override;
		function GetVerb(Index: Integer): string; override;
		function GetVerbCount: Integer; override;
    procedure Edit;override;
	end;

	TSciKeyCommandsPropertyEditor = class(TPropertyEditor)
	public
		procedure Edit; override;
		function GetAttributes: TPropertyAttributes; override;
		function GetValue: string; override;
	end;

  TSciLexerPropertyEditor=class(TStringProperty)
	public
		function GetAttributes: TPropertyAttributes; override;
    procedure GetValueList(List: TStrings);
    procedure GetValues(Proc: TGetStrProc);override;
  end;

  TSciSelectedLanguagePropertyEditor=class(TStringProperty)
	public
		function GetAttributes: TPropertyAttributes; override;
    procedure GetValueList(List: TStrings);
    procedure GetValues(Proc: TGetStrProc);override;
  end;

  TSciHighlighterPropertyEditor=class(TClassProperty)
	public
		function GetAttributes: TPropertyAttributes; override;
    procedure Edit;override;
  end;


procedure Register;
begin
	RegisterComponents( 'Scintilla', [ TScintilla,TScintillaMemo, TSciAutoComplete,TSciCallTips,
  {$Ifndef NOMACRORECORD}
  TSciMacroRecorder,
  {$Endif}
  TScintillaOptionsDlg, TSciSearchReplace,TSciDocumentTabControl,TSciPropertyLoader,TSciAbbrevManager]);
  RegisterClass(TSciLanguageManager);
  RegisterPropertyEditor(TypeInfo(TSciLanguageManager), TScintilla, 'LanguageManager', TSciHighlighterPropertyEditor);
	RegisterComponentEditor(TScintilla, TScintillaComponentEditor);
	RegisterPropertyEditor(TypeInfo(TSciKeyCommandCollection), TScintilla, '', TSciKeyCommandsPropertyEditor);
 	RegisterPropertyEditor(TypeInfo(String), TSciLangItem, 'Lexer', TSciLexerPropertyEditor);
 	RegisterPropertyEditor(TypeInfo(String), TSciLanguageManager, 'SelectedLanguage', TSciSelectedLanguagePropertyEditor);
{$Ifndef COMPILER5}
  RegisterPropertiesInCategory('Visual',TScintillaMemo,['Gutter0','Gutter1','Gutter2','EdgeColor','EdgeMode','EdgeColumn','Indentation','IndentWidth','MarginLeft','MarginRight','MarkerType','WordWrapVisualFlags','WordWrapVisualFlagsLocation','EOLStyle','KeyCommands','Colors','ActiveHotSpot','HideSelect','Caret']);
  RegisterPropertiesInCategory('Visual',TScintilla,['LanguageManager','BraceHilite','CodeFolding']);
  RegisterPropertiesInCategory('Input',TScintillaMemo,['UseTabs','UseUnicode','WordChars','WordWrap','ClearUndoAfterSave','Lines','TabWidth','MouseDwellTime']);
{$Endif}
  RegisterComponents('Additional', [TtcFontComboBox]);


end;

{ TScintillaComponentEditor }
procedure TScintillaComponentEditor.Edit;
begin
  with TEdOptionsWindow.Create(nil) do
  begin
    Editor := Component as TScintilla;
    ShowModal;
    Free;
    if Designer<>nil then  Designer.Modified;
  end;

end;

procedure TScintillaComponentEditor.ExecuteVerb(Index: Integer);
var
odia : TOpenDialog;
sdia : TSaveDialog;
PropLdr : TSciPropertyLoader;
begin
	case Index of
		0 : Edit;
		1:;
		2 : begin
					with Component as TScintilla do
					begin
            if Color=clWindow then Color:=clBlack;
            if Font.Color=clWindowText then Font.Color:=clSilver;
            if Caret.ForeColor=clBlack then Caret.ForeColor:=clRed;
						FillLanguages(LanguageManager.LanguageList,false);
						LanguageManager.Update;
            Designer.Modified;
						//if Designer<>nil then Designer.Modified;
					end;
				end;
		3 : begin
					with Component as TScintilla do
					begin
            if Color=clWindow then Color:=clBlack;
            if Font.Color=clWindowText then Font.Color:=clSilver;
            if Caret.ForeColor=clBlack then Caret.ForeColor:=clRed;

						FillLanguages(LanguageManager.LanguageList,true);
            LanguageManager.SelectedLanguage:='null';
						Designer.Modified;
						MessageBox(Handle,PChar(scithelanguagelistofcontrol+Name+sciiscleared),PChar(sciinformationheader),MB_OK);
					end;
				end;
		4:;
		5: begin
					with Component as TScintilla do
					begin
						odia:=TOpenDialog.Create(nil);
						if odia<>nil then
						begin
							odia.Filter:=scipropertyfilesfilter;
							odia.DefaultExt:=scipropertyfiledefaultextension;
							odia.Title:=scipropertyfileloadtitle;
							odia.Options:=[ofPathMustExist,ofFileMustExist,ofEnableSizing];
							if (odia.Execute) then
							begin
                propldr:=TSciPropertyLoader.Create(nil);
                propldr.Editor:=TScintilla(Component);
                propldr.FileName:=odia.FileName;
                propldr.Load;
                propldr.Free;
                LanguageManager.Update;
							end;
							odia.Free;
						end;
					end;
			 end;
		6: begin
					with Component as TScintilla do
					begin
						sdia:=TSaveDialog.Create(nil);
						if sdia<>nil then
						begin
							sdia.Filter:=scipropertyfilesfilter;
							sdia.DefaultExt:=scipropertyfiledefaultextension;
							sdia.Title:=scipropertyfilesavetitle;
							sdia.Options:=[ofEnableSizing];
							if (sdia.Execute) then
							begin
                propldr:=TSciPropertyLoader.Create(nil);
                propldr.Editor:=TScintilla(Component);
                propldr.FileName:=sdia.FileName;
                propldr.Save;
                propldr.Free;
							end;
							sdia.Free;
						end;
					end;
			 end;
    else
      inherited ExecuteVerb(Index);

  end;
end;

function TScintillaComponentEditor.GetVerb(Index: Integer): string;
begin
  case Index of
    0 : Result :=ssciOptions;
		1 : Result :='-';
		2 : Result :=ssciSelectPredefinedLanguage;
		3 : Result :=ssciClearLanguageList;
    4:  Result :='-';
    5:  Result := ssciLoadStylesFromPropertyFile;
    6:  Result := ssciSaveStylesToPropertyFile;
  else
    Result:=inherited GetVerb(Index);
  end;
end;

function TScintillaComponentEditor.GetVerbCount: Integer;
begin
  Result := 7;
end;

{ TSciKeyCommandsPropertyEditor }


procedure TSciKeyCommandsPropertyEditor.Edit;
begin
  with TScintillaOptionsDlg.Create(nil) do begin
    Editor := GetComponent(0) as TScintilla;
    if Assigned(Editor) then begin
      Pages := [opKeyboard];
      ActivePage := opKeyboard;
      Execute;
    end;
    Free;
  end;
end;

function TSciKeyCommandsPropertyEditor.GetAttributes: TPropertyAttributes;
begin
  Result := [paDialog];
end;

function TSciKeyCommandsPropertyEditor.GetValue: string;
begin
  Result := Format('(%s)', [sscikeycommands]);
end;

{ TSciLexerPropertyEditor }

function TSciLexerPropertyEditor.GetAttributes: TPropertyAttributes;
begin
  Result := [paValueList, paSortList, paMultiSelect];
end;
procedure TSciLexerPropertyEditor.GetValues(Proc: TGetStrProc);
var
  I: Integer;
  Values: TStringList;
begin
  Values := TStringList.Create;
  try
    GetValueList(Values);
    for I := 0 to Values.Count - 1 do Proc(Values[I]);
  finally
    Values.Free;
  end;
end;

procedure TSciLexerPropertyEditor.GetValueList(List: TStrings);
var
tmp : TSciLanguageManager;
langitm : TSciLangItem;
begin
  tmp:=nil;
  langitm :=GetComponent(0) as TSciLangItem; //Get the first selected TSciLangItem, no need to walk them since they're all identical.
  if langitm<>nil then
  begin
    if (langitm.Collection<>nil) and (langitm.Collection is TSciLangList) then // Test if the parent is a TSciLangList, and it isn't nil.
    begin
      if (langitm.Collection.Owner<>nil) and (langitm.Collection.Owner is TSciLanguageManager) then // Test if the parent is a TSciLanguageManager, and it isn't nil.
      begin
        tmp:=TSciLanguageManager(langitm.Collection.Owner);
      end;
    end;
  end;
  if tmp=nil then // Test if a TSciLanguageManager belonging to the current component was found, and if not, create a temporary object.
  begin
    tmp:=TSciLanguageManager.Create(nil);
    tmp.FillListWithLanguages(List,True);
    List.Add(scicontainerconst);
    tmp.Free;
  end else
  begin
    tmp.FillListWithLanguages(List,True);
    List.Add(scicontainerconst);
  end;
end;

{ TSciSelectedLanguagePropertyEditor }


function TSciSelectedLanguagePropertyEditor.GetAttributes: TPropertyAttributes;
begin
  Result := [paValueList, paSortList, paMultiSelect];
end;
procedure TSciSelectedLanguagePropertyEditor.GetValues(Proc: TGetStrProc);
var
  I: Integer;
  Values: TStringList;
begin
  Values := TStringList.Create;
  try
    GetValueList(Values);
    for I := 0 to Values.Count - 1 do Proc(Values[I]);
  finally
    Values.Free;
  end;
end;

procedure TSciSelectedLanguagePropertyEditor.GetValueList(List: TStrings);
var
tmp : TSciLanguageManager;
cnt,i : Integer;
begin
  tmp :=GetComponent(0) as TSciLanguageManager;
  cnt :=tmp.LanguageList.Count;
  for i:=0 to (cnt-1) do
  begin
    List.Add(TSciLangItem(tmp.LanguageList.Items[i]).Name);
  end;
  if (List.IndexOf(scicontainerconst)=-1) then
  begin
    List.Add(scicontainerconst);
  end;
end;
function TSciHighlighterPropertyEditor.GetAttributes: TPropertyAttributes;
begin
  Result := [paDialog,paSubProperties];
end;
procedure TSciHighlighterPropertyEditor.Edit;
var
  Component : TScintilla;
begin
  Component:=GetComponent(0) as TScintilla;
  with TEdOptionsWindow.Create(nil) do
  begin
    Editor := Component;
    ShowModal;
    Free;
    if Designer<>nil then Designer.Modified;
  end;

end;
end.
@


1.6
log
@Delphi Scintilla Interface Components 0.14
@
text
@a1 8
  Author: hdalis (hdalis@@users.sourceforge.net)
     $Id: SciLexerReg.pas,v 1.5 2004/11/13 04:29:50 hdalis Exp $
  Purpose: Register components and component editors.
  History: 29/09/2004 Initial Release
           17/10/2004 Added property editor for the Lexer property of
                      TSciLangItem
}
{
d21 10
a32 1

a34 1
{$Include commondefs.inc}
a36 1

d39 5
a43 3
	DesignIntf, DesignEditors, SciSupport,SciLexerMemo,SciAutoComplete,SciCallTips,EdOptionsWin, SciLexerOptionsDlg, SciSearchReplace,
	SciKeyBindings,SciLexerMod,ScintillaLanguageManager,scilangfiller,SciPropertyMgr,tcFontComboBox,SciDetectUtils
	,SciDocuments,SciMacroRecording;
d70 1
a83 9
const
  scipropertyfilesfilter='Scintilla Property Files (*.properties)|*.properties';
  scipropertyfileloadtitle='Select Propertyfile to load..';
  scipropertyfilesavetitle='Save to what Propertyfile?';
  scipropertyfiledefaultextension='properties';

  sciinformationheader='Information';
  scithelanguagelistofcontrol='The languagelist of the control [';
  sciiscleared='] is cleared.';
d91 1
a91 1
  TScintillaOptionsDlg, TSciSearchReplace,TSciDocumentTabControl,TSciPropertyLoader]);
d98 1
a98 1

d102 1
d116 1
a116 1
    if Designer<>nil then Designer.Modified;
d138 2
a139 1
						if Designer<>nil then Designer.Modified;
d151 2
a152 3
						if Designer<>nil then Designer.Modified;

						MessageBox(Handle,PChar(scithelanguagelistofcontrol+Name+sciiscleared),sciinformationheader,MB_OK);
d210 1
a210 1
    0 : Result := 'Options';
d212 2
a213 2
		2 : Result := 'Select predefined Languages';
		3 : Result := 'Clear Languagelist';
d215 2
a216 2
    5:  Result := 'Load styles from Propertyfile';
    6:  Result := 'Save styles to a Propertyfile';
d250 1
a250 1
  Result := Format('(%s)', ['KeyCommands']);
a252 1

a254 1

@


1.5
log
@Updated to v0.13
@
text
@d3 1
a3 1
     $Id: $
d40 3
a42 3
	DesignIntf, DesignEditors, SciSupport,SciLexerAuto,EdOptionsWin, SciLexerOptionsDlg, SciSearchReplace,
	SciKeyBindings,SciLexerMod,ScintillaSynLexers,scilangfiller,SciPropertyMgr,tcFontComboBox,SciDetectUtils
	,SciDocuments;
d48 1
a48 1
	TScintillaComponentEditor = class(TComponentEditor)
a89 1
  sciisfilledwithdefault='] is filled with the default language styles.';
d94 7
a100 3
	RegisterComponents( 'Scintilla', [ TScintilla, TScintillaAuto,TScintillaOptionsDlg, TSciSearchReplace,TSciPropertyLoader,TSciDocumentTabControl]);
  RegisterClass(TSciSynLexer);
  RegisterPropertyEditor(TypeInfo(TSciSynLexer), TScintilla, 'Highlighter', TSciHighlighterPropertyEditor);
a102 1
	//RegisterPropertyEditor(TypeInfo(TSciKeyCommandCollection), TScintillaAuto, '', TSciKeyCommandsPropertyEditor);
d104 1
a104 1
 	RegisterPropertyEditor(TypeInfo(String), TSciSynLexer, 'SelectedLanguage', TSciSelectedLanguagePropertyEditor);
d106 3
a108 2
  RegisterPropertiesInCategory('Visual',TScintilla,['Gutter0','Gutter1','Gutter2','EdgeColor','EdgeMode','EdgeColumn','Highlighter','Indentation','IndentWidth','MarginLeft','MarginRight','MarkerType','WordWrapVisualFlags','WordWrapVisualFlagsLocation','EOLStyle','KeyCommands','Colors','ActiveHotSpot','CodeFolding','HideSelect','Caret','BraceHilite']);
  RegisterPropertiesInCategory('Input',TScintilla,['UseTabs','UseUnicode','WordChars','WordWrap','AutoCompleteOpts','ClearUndoAfterSave','Lines','TabWidth','MouseDwellTime']);
d142 2
a143 2
						FillLanguages(Highlighter.LanguageList,false);
						Highlighter.Update;
a144 1
						MessageBox(Handle,PChar(scithelanguagelistofcontrol+Name+sciisfilledwithdefault),sciinformationheader,MB_OK);
d154 2
a155 2
						FillLanguages(Highlighter.LanguageList,true);
            Highlighter.SelectedLanguage:='null';
d179 1
a179 1
                Highlighter.Update;
d218 1
a218 1
		2 : Result := 'Fill with default Languages';
d283 1
a283 1
tmp : TSciSynLexer;
d292 1
a292 1
      if (langitm.Collection.Owner<>nil) and (langitm.Collection.Owner is TSciSynLexer) then // Test if the parent is a TSciSynLexer, and it isn't nil.
d294 1
a294 1
        tmp:=TSciSynLexer(langitm.Collection.Owner);
d298 1
a298 1
  if tmp=nil then // Test if a TSciSynLexer belonging to the current component was found, and if not, create a temporary object.
d300 1
a300 1
    tmp:=TSciSynLexer.Create(nil);
d334 1
a334 1
tmp : TSciSynLexer;
d337 1
a337 1
  tmp :=GetComponent(0) as TSciSynLexer;
@


1.4
log
@Delphi Scintilla Interface Components v0.,12
@
text
@d49 1
d53 1
d64 1
d70 1
d76 6
a91 1
  scicontainerconst='container';
d97 1
d100 1
a100 1
	RegisterPropertyEditor(TypeInfo(TSciKeyCommandCollection), TScintillaAuto, '', TSciKeyCommandsPropertyEditor);
d103 1
d107 2
d112 11
d131 1
a131 10
		0 :
			begin
				with TEdOptionsWindow.Create(nil) do
				begin
          Editor := TScintilla(Component);
          ShowModal;
					Free;
        end;
				//Designer.Modified;
			end;
d141 1
a141 1
						Designer.Modified;
d154 1
a154 1
						Designer.Modified;
d205 2
a206 10
    else 
			begin
				with TEdOptionsWindow.Create(nil) do
				begin
          Editor := TScintilla(Component);
          ShowModal;
					Free;
        end;
				//Designer.Modified;
			end;
d221 2
d233 1
d346 18
@


1.3
log
@no message
@
text
@d46 1
d66 17
d86 1
a86 2
	RegisterComponents( 'Scintilla', [ TScintilla, TScintillaAuto,TScintillaOptionsDlg, TSciSearchReplace,TSciPropertyLoader
	,TSciDocumentTabControl] );
a87 1

d92 4
a95 2

  RegisterComponents('SC', [TtcFontComboBox]);
a103 1
fs : TFileStream;
a105 2
	fs :=nil;
	odia :=nil;
a113 1
					//Designer.Modified;
d115 1
d121 3
d127 1
a127 1
						MessageBox(Handle,PChar('The control ['+Name+'] was filled with the default language styles.'),'Information',MB_OK);
d133 4
d138 1
a138 1
            Highlighter.LanguageStr:='null';
d141 1
a141 1
						MessageBox(Handle,PChar('The control ['+Name+'] was cleared of default language styles.'),'Information',MB_OK);
d151 3
a153 3
							odia.Filter:='Scintilla Property Files (*.properties)|*.properties';
							odia.DefaultExt:='properties';
							odia.Title:='Select Propertyfile to load..';
a161 1
                propldr:=nil;
a164 1
							odia:=nil;
d174 3
a176 3
							sdia.Filter:='Scintilla Property Files (*.properties)|*.properties';
							sdia.DefaultExt:='properties';
							sdia.Title:='Save to what Propertyfile?';
a184 1
                propldr:=nil;
a186 1
							sdia:=nil;
d190 11
a200 1
     //SaveStylesToFile('c:\teststyles.properties',m.Highlighter.LanguageList,m);
d270 3
d274 61
a334 1
  LexerMapper.FillListWithLexers(List,True,False);
@


1.2
log
@Some bugfixes, and other changes
@
text
@d2 8
d41 1
a41 1
	SciKeyBindings,SciLexerMod,ScintillaSynLexers,scilangfiller,SciPropertyMgr,tcFontComboBox
d60 5
d75 2
d219 26
@


1.1
log
@Initial revision
@
text
@d1 20
a21 1

d81 1
a81 1
          Scintilla := TScintilla(Component);
d184 2
a185 2
    Scintilla := GetComponent(0) as TScintilla;
    if Assigned(Scintilla) then begin
@


1.1.1.1
log
@no message
@
text
@@
